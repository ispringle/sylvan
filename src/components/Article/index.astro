---
import Backlinks from "@components/Backlinks.astro";
import { formatDate } from "@utils"

import './style.css';
import './prism.css';

const {frontmatter, ...props} = Astro.props;
const { author = "", created = "", modified = "" } = frontmatter;
---
<article class="main">
  {
    author || created || modified
    ? <header class="frontmatter">
      {
        author
          ? <p id="author">Written by {author}</p>
          : ""
      }
      {
        created
          ? <p id="created">Created on {formatDate(created)}</p>
          : ""
      }
      {
        modified
          ? <p id="updated">Last updated on {formatDate(modified)}</p>
          : ""
      }
      </header>
    : ""
  }
    <slot />
    <Backlinks url={frontmatter.link} />
</article>
<script lang="javascript">
function html(tmpl) {
  const el = document.createElement('template');
  el.innerHTML = tmpl.trim();
  return el.content.children;
}

function inlineFootnote(fn) {
  return html(`
    <span class="sidenote">
      <label class="margin-toggle" for="fn-${fn.id}">${fn.el.outerHTML}</label>
      <input class="margin-toggle" id="fn-${fn.id}" type="checkbox">
      <div id="fn.${fn.id}" role="doc-footnote">
        <div class="fndef-number">${fn.id}</div>
        <p>${fn.def}</p>
        <a href="#${fn.fnRefId}"></a>
      </div>
    </span
  `)[0]
}

function liftFootnotes() {
  var [fns, sect] = [{}];
  Array.from(document.getElementsByClassName("footref")).forEach(({id: fnRefId, parentNode: el}) => {
    fns[id = fnRefId.split(".")[1]] = {fnRefId, id, el}
  });
  Array.from(document.getElementsByClassName("footnote-definition")).forEach(({firstChild: f, lastChild: l, parentNode: p}) => {
    fns[f.firstChild.id.split(".")[1]].def = l.innerHTML;
    sect = p;
  });
  sect.remove()
  Object.values(fns).forEach(fn => fn.el.replaceWith(inlineFootnote(fn)))
}

liftFootnotes()
</script>
